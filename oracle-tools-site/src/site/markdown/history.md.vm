Change History
--------------

The following sections outline Oracle Tools project changes in
reverse chronological order.

<h3>Version ${project.version}: ${timestamp} </h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver
*   Jonathan Knight
*   Alexande Chistyakov

<h4>Global and Cross-Module Changes</h4>

*   [ORACLETOOLS-89](https://java.net/jira/browse/ORACLETOOLS-89): Upgraded to require Java 7.

    *BREAKING CHANGE:*  This is a breaking change for those applications that depend on Java 6
    as Oracle Tools now uses Java 7 features (like Autocloseable).

*   [ORACLETOOLS-116](https://java.net/jira/browse/ORACLETOOLS-116): Upgraded
    Maven plugins and Project Dependencies to support Java 8.  This includes:

    Maven Compiler Plugin: Version 2.3.2 -> 3.1
    Maven Enforcer Plugin: Version 1.0.1 -> 1.3.1
    Maven Install Plugin:  Version 2.4 -> 2.5.1
    Maven Javadoc Plugin:  Version 2.8.1 -> 2.9.1
    Maven Release Plugin:  Version 2.4.2 -> 2.5
    Maven Shade Plugin:    Version 2.1 -> 2.3
    Maven Source Plugin:   Version 2.1.2 -> 2.2.1
    Maven Surefire Plugin: Version 2.13 -> 2.17

    ASM Dependency:        Version (inherited) -> 5.0.4
    COHERENCE Dependency:  Version 3.7.1.11 -> 3.7.1.13
    CGLIB Dependency:      Version 2.2.2 -> 3.2.0
    JSCH Dependency:       Version 0.1.50 -> 0.1.53
    JUNIT Dependency:      Version 4.11 -> 4.12
    MOCKITO Dependency:    Version 1.9.0 -> 1.10.19
    OBJENESIS Dependency:  Version 1.2 -> 2.2

*   [ORACLETOOLS-213](https://java.net/jira/browse/ORACLETOOLS-213): Introduced
    Object.equals() and Object.hashCode() methods for all Option implementations.

*   [ORACLETOOLS-268](https://java.net/jira/browse/ORACLETOOLS-268): Refactored
    project to support multiple independent versions of Coherence support.

    *BREAKING CHANGE:* Applications will now need to depend on specific versions
    of Oracle Tools for Coherence, rather than assume one version will work for
    all releases of Coherence.   Additionally, "oracle-tools-all" will no longer
    include Coherence tools.

*   [ORACLETOOLS-285](https://java.net/jira/browse/ORACLETOOLS-285): Introduced
    Maven Flatten Plugin to reduce published pom.xml noise.

*   [ORACLETOOLS-288](https://java.net/jira/browse/ORACLETOOLS-288): Removed the
    Oracle Tools All module (no longer required).

*   [ORACLETOOLS-290](https://java.net/jira/browse/ORACLETOOLS-290): Introduced
    JaCoCo module to support Code Coverage analysis.

*   [ORACLETOOLS-291](https://java.net/jira/browse/ORACLETOOLS-291): Introduced
    JProfiler module to support Java application profiling.

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-87](https://java.net/jira/browse/ORACLETOOLS-87): Increased
    the default Deferred timeout from 30 to 60 seconds.  This won't
    impact existing tests but will allow for longer running tests without
    requiring developers to explicitly specify a max timeout or override
    system properties.

*   [ORACLETOOLS-95](https://java.net/jira/browse/ORACLETOOLS-95): Introduced
    AbstractDeferred class to enable simple annoymous inner-class (and Lambda)
    implementations of Deferreds.

*   [ORACLETOOLS-97](https://java.net/jira/browse/ORACLETOOLS-97): Introduced
    the com.oracle.tools.predicate package and refactored existing Predicate
    based classes and usages to that package.

    *BREAKING CHANGE:*  This may be a breaking change for implementations
    that are extending the existing Predicate interface in the future.
    Implementations are encouraged to instead extend the
    com.oracle.tools.predicate.Predicate interface.

*   [ORACLETOOLS-109](https://java.net/jira/browse/ORACLETOOLS-109): Resolved
    issues with the ReflectionHelper.getCompatibleMethod/Constructor failing
    to locate interface methods and those defined in super classes.

*   [ORACLETOOLS-121](https://java.net/jira/browse/ORACLETOOLS-121): Resolved
    issues with the ReflectionHelper.getCompatibleMethod/Constructor failing
    to locate methods using primitive and/or wrapped values.

*   [ORACLETOOLS-138](https://java.net/jira/browse/ORACLETOOLS-138): Introduced
    the concept of a Deferred/Ensured TimoutConstraint to simplify Ensured
    constructors and Eventually.assertThat methods.

*   [ORACLETOOLS-139](https://java.net/jira/browse/ORACLETOOLS-139): Introduced
    the UnavailableException, PermanentlyUnavailableException and
    TemporarilyUnavailableExceptions to replace the deprecated
    InstanceUnavailableException and UnresolvableInstanceExceptions.

*   [ORACLETOOLS-172](https://java.net/jira/browse/ORACLETOOLS-172): Resolved
    inability to use DeferredHelper.invoking(...) method calls that return arrays.

*   [ORACLETOOLS-186](https://java.net/jira/browse/ORACLETOOLS-186): Moved the
    Diagnostics option from the oracle-tools-runtime module into the
    oracle-tools-core module.

*   [ORACLETOOLS-187](https://java.net/jira/browse/ORACLETOOLS-187): Ensured
    that the Options.getClassOfOption(...) methods only return concrete classes
    or interfaces directly implementing the Option/ComposableOption interfaces.

*   [ORACLETOOLS-198](https://java.net/jira/browse/ORACLETOOLS-198): Introduced
    the ability to specify the proxy type when using invoking(..., Class).
    This allows final class instances to be specified for invoking, but a proxy
    of interfaces or super classes to be created.

*   [ORACLETOOLS-199](https://java.net/jira/browse/ORACLETOOLS-199): Resolved
    issue where attempting to call invoking(...) on a final class/instance
    would cause misleading exceptions to be thrown.

*   [ORACLETOOLS-200](https://java.net/jira/browse/ORACLETOOLS-200): Introduced
    DeferredCallables, DeferredHelper.deferred(Callable) and
    DeferredHelper.valueOf(Callable) to allow simple application of Java 8
    lambdas.

    eg: Eventually.assertThat(valueOf(() -> 42), is(42));

*   [ORACLETOOLS-201](https://java.net/jira/browse/ORACLETOOLS-201): Allowed
    Atomic types to be used with DeferredHelper.valueOf(...) thus making
    Eventually.assertThat(...) calls simpler.  eg: there's no reason to use
    valueOf(deferred(atomic)), now you can just use valueOf(atomic).

*   [ORACLETOOLS-202](https://java.net/jira/browse/ORACLETOOLS-202): Resolved
    issue where the Ensured class would continuously attempt to retry (calling
    .get() on the underlying Deferred) when null was encountered.   This is
    incorrect behavior according to the contract defined by the Deferred class.

    *BREAKING CHANGE:* This may be a breaking change for some custom Deferred
    implementations in Oracle Tools 1.x

*   [ORACLETOOLS-209](https://java.net/jira/browse/ORACLETOOLS-209): Allowed
    java.lang.Enums to be used as part of invoking(...) calls.

*   [ORACLETOOLS-211](https://java.net/jira/browse/ORACLETOOLS-211): Introduced
    upper-bound for ensured (deferred) polling times.  Introduced Duration
    class to represent Durations.  Refactored Timeout to use Durations.  Refactored
    internal implementations to use Durations where appropriate.

*   [ORACLETOOLS-219](https://java.net/jira/browse/ORACLETOOLS-219): Introduced
    initial support for resolving Java Expression Language expressions in various
    places, including System Properties and Environment Variables.

*   [ORACLETOOLS-272](https://java.net/jira/browse/ORACLETOOLS-272): Changed
    ExceptionListener.onException method to accept a Throwable instead of an
    Exception to allow Errors to be handled.

    *BREAKING CHANGE:* This may be a breaking change for any application
    that implements this interface (thought it's only used internally in
    Oracle Tools).

*   [ORACLETOOLS-277](https://java.net/jira/browse/ORACLETOOLS-277): Added support
    for default options using the @Options.Default annotation.

*   [ORACLETOOLS-279](https://java.net/jira/browse/ORACLETOOLS-279): Refactored
    SystemProperty(ies) and EnvironmentVarible(s) classes to be Collector(ables).

    *BREAKING CHANGE:* This change may break any application using the
    SystemProperty(ies) and/or EnvironmentVariable(s) classes.

    With this change, there's no longer a reason to use the PropertiesBuilder
    class.

*   [ORACLETOOLS-289](https://java.net/jira/browse/ORACLETOOLS-289): Introduced
    the ability to pass parameters to Options.get(Class, ...) to allow them to
    be used when calling @Options.Default

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-61](https://java.net/jira/browse/ORACLETOOLS-61): Introduced
    the concept of Platform, together with LocalPlatform and RemotePlatform
    implementations.

*   [ORACLETOOLS-69](https://java.net/jira/browse/ORACLETOOLS-69): Removed
    PropertiesBuilder "default" property support (includes "default" system
    properties support from JavaApplicationSchema).

    *BREAKING CHANGE:*  While this is a breaking API change, it's highly
    unlikely that this will effect anyone as it wasn't used internally.
    Applications using this method are safe to use regular properties
    instead.

*   [ORACLETOOLS-79](https://java.net/jira/browse/ORACLETOOLS-79): Completed
    implementation of stdin redirection so that an ApplicationConsole can
    be used to interact with an Application stdin.

*   [ORACLETOOLS-83](https://java.net/jira/browse/ORACLETOOLS-83): Refactored
    RemoteExecutorServer to use ephemeral ports and remove hardcoded binding
    to Constants.getLocalHost() ie: 127.0.0.1 to allow operation in non-localhost
    modes (like for the new Remote Runtime module).

*   [ORACLETOOLS-86](https://java.net/jira/browse/ORACLETOOLS-86): Resolved issue
    where calling Application.waitFor() will not terminate when using applications
    produced by LocalJavaApplicationBuilders.

*   [ORACLETOOLS-88](https://java.net/jira/browse/ORACLETOOLS-88): Added wildcard
    classpath support to ClassPath.

*   [ORACLETOOLS-92](https://java.net/jira/browse/ORACLETOOLS-92): Introduced
    RemoteRunnable and RemoteCallable for use with RemoteExecutors (and applications)
    to allow Java 8 Lambda expressions to be used to represent remote
    requests.

    *BREAKING CHANGE:* While a breaking change in the APIs (from Runnable to RemoteRunnable
    and Callable to RemoteCallable), the impact on public implementations should
    be minimal as most implementations are already serializable.   All that is
    required is changing either "implements Runnable, Serializable" to
    "implements RemoteRunnable", or "implements Callable&lt;T&gt;, Serializable" to
    "implements RemoteCallable&lt;T&gt;".

*   [ORACLETOOLS-93](https://java.net/jira/browse/ORACLETOOLS-93): Added the
    ability to explicitly specify the required JAVA_HOME through the use of
    the JavaHome Option.  When not set, the JAVA_HOME of the executing process is
    assumed.

*   [ORACLETOOLS-94](https://java.net/jira/browse/ORACLETOOLS-94): Introduced
    Local(Java)ApplicationBuilder to replace and deprecate the
    Native(Java)ApplicationBuilder.   This provides consistency and appropriate
    symmetry with the new Remote(Java)ApplicationBuilders.

*   [ORACLETOOLS-96](https://java.net/jira/browse/ORACLETOOLS-96): Refactored how
    custom operating system environment variables may be defined.  They can now
    be defined on ApplicationSchema and ApplicationBuilders using the new
    EnvironmentVariables Option.

*   [ORACLETOOLS-101](https://java.net/jira/browse/ORACLETOOLS-101): Introduced
    the ability to specify an ApplicationConsoleBuilder and thus ApplicationConsole
    for each Application defined as part of an Assembly/ApplicationGroup.

*   [ORACLETOOLS-102](https://java.net/jira/browse/ORACLETOOLS-102): Removed the
    requirement to throw/catch IOExceptions when using ApplicationBuilders and
    AssemblyBuilders.

    *BREAKING CHANGE:*  This will be a breaking change for applications that
    expect IOExceptions to be thrown from ApplicationBuilders or
    ApplicationGroupBuilders.

*   [ORACLETOOLS-104](https://java.net/jira/browse/ORACLETOOLS-104): Refactored
    fluent-methods from existing interfaces and classes into their own interfaces.

    This enables dramatic simplification of the use of generics, especially when
    creating ApplicationBuilders, Assembly/ApplicationGroup Builders and new Schemas.

*   [ORACLETOOLS-106](https://java.net/jira/browse/ORACLETOOLS-106): Introduced
    the concept of an Assembly.  This replaces the concept of an ApplicationGroup.

*   [ORACLETOOLS-112](https://java.net/jira/browse/ORACLETOOLS-112): Introduced
    the ability to specify a RemoteDebugging Option for Java Applications. Remote
    debugging is automatically enabled for local processes if the controlling process
    (typically an IDE) is running in debug mode.

*   [ORACLETOOLS-114](https://java.net/jira/browse/ORACLETOOLS-114): Introduced
    JavaVirtualMachine as an implementation of a Platform to represent the
    current JVM process.  This allows JavaApplications to be realized "inside"
    the current JVM.

*   [ORACLETOOLS-118](https://java.net/jira/browse/ORACLETOOLS-118): Resolved
    issues where not all output was readable from PipedApplicationConsole
    when the Application has terminated. Continuing to read past the last
    line of output would throw an Exception rather than returning the
    correct end-of-file result.

*   [ORACLETOOLS-119](https://java.net/jira/browse/ORACLETOOLS-119): Introduced
    Diagnostic Mode to ApplicationConsole to allow consoles to indicate that they
    want output from Applications to be prefixed with details of the
    Application name, PID and line number. By default this is on for all
    ApplicationConsole implementations except NullApplicationConsole. If
    Diagnostic Mode is set to false then the raw application output is written
    to the ApplicationConsole. This is useful especially for tests that use
    PipedApplicationConsole to read and assert Application output so that
    they do not need to parse the output to remove the application details prefix.

*   [ORACLETOOLS-120](https://java.net/jira/browse/ORACLETOOLS-120): Resolved
    issue in RemoteCallableStaticMethod where no matching method is found
    if an empty Iterable is passed to its constructor.

*   [ORACLETOOLS-122](https://java.net/jira/browse/ORACLETOOLS-122): Resolved
    issue where JavaApplicationLauncher failed to close the internal
    RemoteExecutorService.

*   [ORACLETOOLS-123](https://java.net/jira/browse/ORACLETOOLS-123): Resolved
    issue where SocketBasedRemoteExecutors failed to completely read requests
    (operations) from underlying Sockets (InputStreams), thus resulting in
    the appearence of abnormal/early termination of JavaApplications.

*   [ORACLETOOLS-124](https://java.net/jira/browse/ORACLETOOLS-124): Introduced
    the ability to dynamically create a proxy of a JavaApplication owned and
    managed instance so that it may be called (remotely) via the JavaApplication.

*   [ORACLETOOLS-127](https://java.net/jira/browse/ORACLETOOLS-127): Introduced
    FluentApplicationSchema addArgument, addArguments and setArguments methods.
    Removed AbstractApplicationSchema addArgument and setArgument methods.

*   [ORACLETOOLS-129](https://java.net/jira/browse/ORACLETOOLS-129): Introduced
    CapturingApplicationConsole. This allows lines from the stdout and stderr
    streams from an application to be captured to a LinkedList so that the output
    can then easily be asserted in tests by evaluating the contents of the list.
    The CapturingApplicationConsole also allows data to be piped in to the
    Application's stdin stream.

*   [ORACLETOOLS-130](https://java.net/jira/browse/ORACLETOOLS-130): Introduced
    the ability to intercept remote method invocation, including the ability
    to transform method arguments, return results and exceptions.

*   [ORACLETOOLS-131](https://java.net/jira/browse/ORACLETOOLS-131): Refactored
    (moved) RemoteCallable and RemoteRunnable implementations to be outside of the
    com.oracle.tools.runtime.java package to resolve intermittent Container-based
    test failures (during serialization).

    *BREAKING CHANGE:*  This is a breaking change for anyone that has created
    customized JavaApplicationSchemas specifically designed for using
    ContainerBasedJavaApplicationBuilders with customized RemoteCallableStaticMethods
    (should basically be no one!)

*   [ORACLETOOLS-132](https://java.net/jira/browse/ORACLETOOLS-132): Resolved
    issue where specifying a custom class path for a JavaApplicationSchema
    may result in a Java Application failing to launch
    (with JavaApplicationLauncher Class Not Found errors).

*   [ORACLETOOLS-133](https://java.net/jira/browse/ORACLETOOLS-133): Introduced copy
    constructors for ApplicationSchema implementations.

*   [ORACLETOOLS-135](https://java.net/jira/browse/ORACLETOOLS-135): Introduced
    the ability to request Platform specific Options from an ApplicationSchema.
    This allows individual ApplicationSchema's to customize the returned Options
    based on a specific type of Platform.

*   [ORACLETOOLS-136](https://java.net/jira/browse/ORACLETOOLS-136): Resolved potential
    race-condition when submitting RemoteCallables/RemoteRunnables to a
    JavaApplication using debugging and suspend-on-start mode.  Such submissions
    will now throw an IllegalStateException.

*   [ORACLETOOLS-137](https://java.net/jira/browse/ORACLETOOLS-137): Introduced
    the concept of an ApplicationRuntime, a class encapsulating internal
    runtime information concerning an Application.  Refactored all internal
    Application implementations to take an ApplicationRuntime parameter,
    replacing numerous constructor parameters with a single structure.

*   [ORACLETOOLS-140](https://java.net/jira/browse/ORACLETOOLS-140): Made
    Socket-based Controllable RemoteExecutors Closeable.

*   [ORACLETOOLS-141](https://java.net/jira/browse/ORACLETOOLS-141): Removed
    the requirement for Application.waitFor() method to throw an InterruptedException.

*   [ORACLETOOLS-142](https://java.net/jira/browse/ORACLETOOLS-142): Introduced
    the concept of an Option, something that encapsulates custome *Builder,
    Oracle Tools and Platform specific configuration, those of which can be
    passed into Platform.realize(...) methods to control Application creation.

    Consequently removed all *Builder, Oracle Tools and Platform specific
    configurations from Schemas and Builders, replacing all said uses with
    appropriate Option implementation.

    *BREAKING CHANGE:*  This is a breaking change for anyone that relies on
    using Builders / Schemas / Platform specific configuration options.

*   [ORACLETOOLS-143](https://java.net/jira/browse/ORACLETOOLS-143): Renamed
    the AssemblyBuilder (ApplicationGroupBuilder) addApplication method to
    be addSchema (as it should be).  Additionally re-ordered the parameters
    to allow for inclusion of Options introduced in
    [ORACLETOOLS-142](https://java.net/jira/browse/ORACLETOOLS-142)

    *BREAKING CHANGE:*  This is a breaking change for anyone that relies on
    using ApplicationGroupBuilder.addApplication method.

*   [ORACLETOOLS-144](https://java.net/jira/browse/ORACLETOOLS-144): Removed
    deprecated interfaces and classes.

    The following table outlines the old interfaces / classes and the replacement
    ones for use.

    *Old Interface* -> *New Interface*
    ApplicationGroup -> Assembly
    ApplicationGroupBuilder -> AssemblyBuilder
    JavaApplicationGroup -> (no longer required)
    JavaApplicationGroupBuilder -> (no longer required)

    *Old Class* -> *New Class*
    AbstractApplicationGroup -> AbstractAssembly
    AbstractApplicationGroupBuilder -> AbstractAssemblyBuilder
    ExternalJavaApplicationBuilder -> LocalJavaApplicationBuilder
    NativeJavaApplicationBuilder -> LocalJavaApplicationBuilder
    VirtualizedJavaApplicationBuilder -> ContainerBasedJavaApplicationBuilder

*   [ORACLETOOLS-146](https://java.net/jira/browse/ORACLETOOLS-146): Refactored
    Platform.realize(...) to reorder the parameters so that using Options
    is permitted (in various other classes).

*   [ORACLETOOLS-147](https://java.net/jira/browse/ORACLETOOLS-147): Refactored
    AbstractAssembly.get/add/removeApplication methods to drop the term "Application".

*   [ORACLETOOLS-148](https://java.net/jira/browse/ORACLETOOLS-148): Resolved
    issue where Container-based Java Applications (created with the
    ContainerBasedJavaApplicationBuilder or JavaVirtualMachine platform) would
    not be isolated from each other unless Container.start() was called.  This
    is no longer a requirement.

*   [ORACLETOOLS-149](https://java.net/jira/browse/ORACLETOOLS-149): Made
    ContainerBasedJavaApplicationBuilders / JavaVirtualMachine platforms throw
    a RuntimeException (wrapping a ClassNotFoundException) eagerly when attempting
    to start an application and the application class can't be found.

*   [ORACLETOOLS-152](https://java.net/jira/browse/ORACLETOOLS-152): Refactored
    (and removed) ApplicationSchema Environment Variables Builder support.

    *BREAKING CHANGE:*  To specify environment variables for an application
    developers should now use the EnvironmentVariables Option, that provides
    greater flexibility and semantics.

*   [ORACLETOOLS-153](https://java.net/jira/browse/ORACLETOOLS-153): Refactored
    (and removed) RemoteApplicationSchema/Builder temporary directory
    configuration.

    *BREAKING CHANGE:* To specify a temporary directory developers should now
    use the new TemporaryDirectory Option, that provides improved semantics.

*   [ORACLETOOLS-154](https://java.net/jira/browse/ORACLETOOLS-154): Introduced
    PlatformSeparators Option to replace setters/getters for File and Path
    separators.

*   [ORACLETOOLS-155](https://java.net/jira/browse/ORACLETOOLS-155): Refactored
    and removed FluentJavaApplicationSchema.add/set/getJvmOption*s so that the
    Platform-specific Options can be used.   Introduced HeapSize and JvmOptions
    classes to support specifying Java Virtual Machine options.

    eg:   schema.addOption(HeapSize.minimum(3, Units.MB));
          platform.realize(name, schema, JvmOptions.include("-Xms3m"));

*   [ORACLETOOLS-156](https://java.net/jira/browse/ORACLETOOLS-156): Introduced
    the ability to add default platform specific Options to ApplicationSchema

*   [ORACLETOOLS-157](https://java.net/jira/browse/ORACLETOOLS-157): Refactored
    RemoteDebugging option and implementation into the RemoteDebugging Profile

    *BREAKING CHANGE:* Any application currently using the RemoteDebugging Option
    will need to switch to use the RemoteDebugging Profile.

*   [ORACLETOOLS-158](https://java.net/jira/browse/ORACLETOOLS-158): Replaced
    the JavaApplicationSchema.isOrphanable configuration and associated
    setters/getters with the new Orphanable Option.

    *BREAKING CHANGE:* To specify the orphanable characteristics of a Java
    Application, developers should now use the new Orphanable Option.

*   [ORACLETOOLS-159](https://java.net/jira/browse/ORACLETOOLS-159): Replaced
    the ApplicationSchema.isErrorStreamRedirected and associated setters/getters
    with the ErrorStreamRedirection Option.

    *BREAKING CHANGE:* To specify error stream redirection developers should now
    use the new ErrorStreamRedirection Option.

*   [ORACLETOOLS-160](https://java.net/jira/browse/ORACLETOOLS-160): Introduced
    HeapSize.Unit.GB support.

*   [ORACLETOOLS-163](https://java.net/jira/browse/ORACLETOOLS-163): Introduced
    HotSpot.Mode Option to support the -server and -client JVM Options.

*   [ORACLETOOLS-165](https://java.net/jira/browse/ORACLETOOLS-165): Made
    SocketBasedRemoteExecutor notify "local" CompletionListeners when they are
    provided for submissions.

*   [ORACLETOOLS-168](https://java.net/jira/browse/ORACLETOOLS-168): Added
    the method public &lt;T&gt; T submit(RemoteCallable&lt;T&gt; callable) from
    AbstractJavaApplication to the JavaApplication interface.

*   [ORACLETOOLS-171](https://java.net/jira/browse/ORACLETOOLS-171): Refactored
    Constants.getLocalHost() to remove the requirement for unnecessary security
    permissions.

*   [ORACLETOOLS-173](https://java.net/jira/browse/ORACLETOOLS-173): Ensured
    that calling Application.close() will appropriately remove the Application
    from an associated Assembly.

*   [ORACLETOOLS-174](https://java.net/jira/browse/ORACLETOOLS-174): Refactored
    and replaced LifecycleInterceptors with ApplicationListeners, a much simpler
    approach to dealing with life-cycle events.

    *BREAKING CHANGE:*  Any use of LifecycleInterceptors will no longer work.
    Instead applications should be migrated to use ApplicationListeners instead.

*   [ORACLETOOLS-176](https://java.net/jira/browse/ORACLETOOLS-176): Resolved
    thread-safety issue with CapturingApplicationConsole.

    *BREAKING CHANGE:*  The returned type of numerous methods were changed to
    Queue from LinkedList.

*   [ORACLETOOLS-180](https://java.net/jira/browse/ORACLETOOLS-180): Correctly
    double-quoted ApplicationSchema.getExecutableName() when it contains spaces.

*   [ORACLETOOLS-182](https://java.net/jira/browse/ORACLETOOLS-182): Resolves
    an issue where session timeouts are set to zero for remote applications,
    regardless of what may be configured.

*   [ORACLETOOLS-185](https://java.net/jira/browse/ORACLETOOLS-185): Optimized
    diagnostics output when using SystemApplicationConsoles to avoid duplicate
    output occuring.

*   [ORACLETOOLS-186](https://java.net/jira/browse/ORACLETOOLS-186): Moved the
    Diagnostics option into the oracle-tools-core module.

*   [ORACLETOOLS-194](https://java.net/jira/browse/ORACLETOOLS-194): Introduced
    Application.close(Option...) and the ApplicationClosingBehavior Option
    as a means of controlling how Applications are closed.

*   [ORACLETOOLS-203](https://java.net/jira/browse/ORACLETOOLS-203): Resolved
    intermittent LocalJavaApplicationBuilder connect-back-to-java-debugger
    test failures.  Remote Java Debugging should not specify a port for
    local host sessions.

*   [ORACLETOOLS-204](https://java.net/jira/browse/ORACLETOOLS-204): Resolved
    race-condition where by Remote Executor Service may acquire a port that is
    about to be allocated to a System Property.

*   [ORACLETOOLS-207](https://java.net/jira/browse/ORACLETOOLS-207): Introduced
    Assembly.close(Option...) as a means of controlling how assemblies are closed.

*   [ORACLETOOLS-214](https://java.net/jira/browse/ORACLETOOLS-214): Introduced
    Option support into Platform implementations.

*   [ORACLETOOLS-215](https://java.net/jira/browse/ORACLETOOLS-215): Removed
    the requirement for the Assembly interface to extend Option and ApplicationListener.

*   [ORACLETOOLS-217](https://java.net/jira/browse/ORACLETOOLS-217): AvailablePortIterator
    should bind to the wildcard address by default, not localhost.

*   [ORACLETOOLS-218](https://java.net/jira/browse/ORACLETOOLS-218): Removed
    the PlatformAware interface together with all internal implementations.

*   [ORACLETOOLS-220](https://java.net/jira/browse/ORACLETOOLS-220): Ensured
    JMX is configued to listen on wildcard addresses.  Connections to JMX
    for Java Applications can reasonably be made on any locally routable network
    address on the Platform on which the said applications are running.

*   [ORACLETOOLS-221](https://java.net/jira/browse/ORACLETOOLS-221): Ensured
    Remote Debuging for Java Applications is configued to listen on wildcard
    addresses.  Debugging connections to Java Applications can reasonably be
    made on any locally routable network address on the Platform on which the
    said applications are running.

*   [ORACLETOOLS-223](https://java.net/jira/browse/ORACLETOOLS-223): Refactored
    Platform Networking implementation, in particular how addresses are discovered
    and chosen for Oracle Tools.

    *BREAKING CHANGE:*  This change removes several public methods that
    can cause application using Oracle Tools to choose invalid network adapters
    and addresses on multi-homed networks.

    The following methods have been removed:

    Platform.getPublicInetAddress(), Platform.getPrivateInetAddress(),
    LocalPlatform.getHostName().

    The following method was added:

    Platform.getAddress()

    All locally-based Application Builders now default to using loopback for
    starting and managing local applications.

*   [ORACLETOOLS-224](https://java.net/jira/browse/ORACLETOOLS-224): Introduced
    Cygwin PlatformSeparator options.

*   [ORACLETOOLS-225](https://java.net/jira/browse/ORACLETOOLS-225): Refactored
    ClassPath.toString(...) to use PlatformSeparators when generating a classpath.

*   [ORACLETOOLS-226](https://java.net/jira/browse/ORACLETOOLS-226): Introduced
    the ability to perform LocalPlatform diagnostics, simply by executing the
    LocalPlatform class (main method).

*   [ORACLETOOLS-227](https://java.net/jira/browse/ORACLETOOLS-227): Introduced
    ClassPathModifier Option to allow ClassPath modification by platforms
    (like cygwin).

*   [ORACLETOOLS-233](https://java.net/jira/browse/ORACLETOOLS-233): Refactored
    ClassPath generation for Local Java Applications to use -cp instead of
    the CLASSPATH environment variable.

*   [ORACLETOOLS-242](https://java.net/jira/browse/ORACLETOOLS-242): Introduced
    LocalPlatform.getLoopbackAddress() method to obtain the loopback address
    of the LocalPlatform.

*   [ORACLETOOLS-243](https://java.net/jira/browse/ORACLETOOLS-243): Enhanced
    AvailablePortIterator to ensure both TCP and UDP sockets are available.

*   [ORACLETOOLS-245](https://java.net/jira/browse/ORACLETOOLS-245): Enhanced
    AvailablePortIterator to protect a set of InetAddresses (when required).

*   [ORACLETOOLS-248](https://java.net/jira/browse/ORACLETOOLS-248): Enhanced
    AvailablePortIterator to protect bindable addresses (instead of wildcard)
    to prevent to possibility of port "hijacking" on some platforms (OSX / Solaris).

*   [ORACLETOOLS-250](https://java.net/jira/browse/ORACLETOOLS-250): Enhanced
    LocalJavaApplicationBuilder logging to improve readability of application
    startup information.

*   [ORACLETOOLS-252](https://java.net/jira/browse/ORACLETOOLS-252): Introduced
    CommercialFeatures Profile to enable unlocking "commercial features" of
    the Java Virtual Machine.

*   [ORACLETOOLS-255](https://java.net/jira/browse/ORACLETOOLS-255): Refactored
    ApplicationBuilder interface to require a specific Platform type.

*   [ORACLETOOLS-264](https://java.net/jira/browse/ORACLETOOLS-264): Introduced
    concurrent request execution support for SocketBasedRemoteExecutors.

*   [ORACLETOOLS-266](https://java.net/jira/browse/ORACLETOOLS-266): Changed
    uses of System.exit(...) in the JavaApplicationLauncher to use
    Runtime.getRuntime().halt(...) to ensure misbehaving shutdown hooks
    don't unnecessary block / hang shutdowns.

*   [ORACLETOOLS-267](https://java.net/jira/browse/ORACLETOOLS-267): Introduced
    "Application Launch Time" output for application diagnostics.

*   [ORACLETOOLS-269](https://java.net/jira/browse/ORACLETOOLS-269): Refactored
    Java Virtual Machine Platform builder to use new diagnostics table output.

*   [ORACLETOOLS-280](https://java.net/jira/browse/ORACLETOOLS-280): Introduced
    Freeform JvmOptions and refactored the need for JvmOptions class.

*   [ORACLETOOLS-281](https://java.net/jira/browse/ORACLETOOLS-281): Introduced
    JavaAgent option to define JavaAgents for Java Applications.

*   [ORACLETOOLS-282](https://java.net/jira/browse/ORACLETOOLS-282): Enhanced
    JvmOption.getValues() method to allow Options to be provided.

*   [ORACLETOOLS-283](https://java.net/jira/browse/ORACLETOOLS-283): Introduced
    tests demonstrating definition and use of JaCoCo with JavaApplications.

    *IMPORTANT:* For JaCoCo to correctly generate Code Coverage telemetrics,
    JavaApplications must be closed with either a SystemExit or RuntimeExit
    ApplicationClosingBehavior.

*   [ORACLETOOLS-284](https://java.net/jira/browse/ORACLETOOLS-284): Introduced
    the ability to include all "oracletools.runtime.inherit.*" system property
    values (defined for the process using Oracle Tools) automatically included
    in the command-line for any applications started (by Oracle Tools).

*   [ORACLETOOLS-286](https://java.net/jira/browse/ORACLETOOLS-286): Introduced
    the concept of a runtime Profile, allowing interception of configuration,
    starting and stopping applications.

*   [ORACLETOOLS-296](https://java.net/jira/browse/ORACLETOOLS-296): Resolved
    issue where a ClassPath may contain duplicate entries.

<h4>oracle-tools-runtime-jacoco</h4>

*   [ORACLETOOLS-290](https://java.net/jira/browse/ORACLETOOLS-290): Introduced
    JaCoCo Profile (in an optional module) to support Code Coverage analysis.

<h4>oracle-tools-runtime-jprofiler</h4>

*   [ORACLETOOLS-291](https://java.net/jira/browse/ORACLETOOLS-291): Introduced
    JProfiler module to support Java application profiling.

<h4>oracle-tools-runtime-remote</h4>

*   [ORACLETOOLS-91](https://java.net/jira/browse/ORACLETOOLS-91): Introduced
    RemoteApplicationBuilders in the new oracle-tools-runtime-remote module.

*   [ORACLETOOLS-113](https://java.net/jira/browse/ORACLETOOLS-113): Introduced
    a RemotePlatform implementation of a Platform.

*   [ORACLETOOLS-150](https://java.net/jira/browse/ORACLETOOLS-150): Introduced
    constructors for RemotePlatforms that use simple default values (making them
    much simpler to use).

*   [ORACLETOOLS-151](https://java.net/jira/browse/ORACLETOOLS-151): Introduced
    StrictHostChecking option and removed previous setters/getters for
    strict-host-checking across builders.

*   [ORACLETOOLS-178](https://java.net/jira/browse/ORACLETOOLS-178): Resolved
    issue where wildcards in Java Application classpaths would be expanded
    into a list of every file name (when using tsch).

*   [ORACLETOOLS-179](https://java.net/jira/browse/ORACLETOOLS-179): Resolved
    issue where deployment of custom artifacts failed when using a
    CustomDeployment option where the destination directory for
    the artifacts is not the default working directory.

*   [ORACLETOOLS-183](https://java.net/jira/browse/ORACLETOOLS-183): Resolved
    issue where Remote Java Application Builders were providing a non-routable
    address to remote applications.

*   [ORACLETOOLS-189](https://java.net/jira/browse/ORACLETOOLS-189): Resolved
    ability to set environment variables on some Remote Platforms
    (works around JSch defect / inability to reliably set environment variables).

*   [ORACLETOOLS-195](https://java.net/jira/browse/ORACLETOOLS-195): Resolved
    issue where RemoteJavaApplicationBuilders did not wait for launched
    RemoteJavaApplications to "connect back".

*   [ORACLETOOLS-214](https://java.net/jira/browse/ORACLETOOLS-214): Introduced
    Option support into RemotePlatform implementations.

*   [ORACLETOOLS-231](https://java.net/jira/browse/ORACLETOOLS-231): Improved the
    remote debug attach option to allow a the host name as well as the port to be
    specified for the remote debugger that the application shoul dconnect to.

*   [ORACLETOOLS-237](https://java.net/jira/browse/ORACLETOOLS-237): Refactored
    remote runtime to allow other remote shells to be added as alternatives to
    SSH.

*   [ORACLETOOLS-238](https://java.net/jira/browse/ORACLETOOLS-238): Added the
    option to specify HTTP download using curl or wget as an alternative to
    SFTP as a method of deploying remote artifacts.

*   [ORACLETOOLS-239](https://java.net/jira/browse/ORACLETOOLS-239): Added
    Windows Remote Management (WinRM) as an alternative to SSH for controlling
    remote processes on a platform running a Windows O/S.

*   [ORACLETOOLS-239](https://java.net/jira/browse/ORACLETOOLS-263): Added a
    Deployer implementation that allows artifacts to be deployed to a remote
    platform by copying them to a file share mounted on both the local and
    remote platforms.

*   [ORACLETOOLS-292](https://java.net/jira/browse/ORACLETOOLS-292): Added
    support for hostbased authentication for remote platforms that are
    using SSH.

<h4>oracle-tools-runtime-vagrant</h4>

*   [ORACLETOOLS-222](https://java.net/jira/browse/ORACLETOOLS-222): Fixed bug
    where the Vagrant configuration file was created with a file name that did
    not work on case sensetive file systems such as Linux.

*   [ORACLETOOLS-232](https://java.net/jira/browse/ORACLETOOLS-232): Fixed bug
    where a VagrantPlatform may use the wrong port for SSH connections.

<h4>oracle-tools-runtime-virtual</h4>

*   [ORACLETOOLS-115](https://java.net/jira/browse/ORACLETOOLS-115): Introduced
    support for Virtual Machines and specifically support for configuring
    controlling virtual machines using Vagrant.

*   [ORACLETOOLS-214](https://java.net/jira/browse/ORACLETOOLS-214): Introduced
    Option support into VirtualPlatform implementations, includes refactoring
    CloseAction as an Option.

<h4>oracle-tools-runtime-windows</h4>

*   [ORACLETOOLS-239](https://java.net/jira/browse/ORACLETOOLS-239): Introduced
    Microsoft Windows specific platform support for starting, stopping and
    deploying applications on remote windows platforms.

*   [ORACLETOOLS-295](https://java.net/jira/browse/ORACLETOOLS-295): Fixed an
    issue with the SoapConnection class to properly synchronize access to the
    SOAP message marshaller and unmarshaller.

<h4>oracle-tools-testing-support</h4>

*   [ORACLETOOLS-84](https://java.net/jira/browse/ORACLETOOLS-84): Introduced
    missing Eventually.assertThat methods to support timeouts.

*   [ORACLETOOLS-138](https://java.net/jira/browse/ORACLETOOLS-138):Refactored
    Eventually.assertThat methods to take TimeoutConstraints.  Deprecated
    previous methods that took millisecond-based parameters.  Introduced
    helper methods to create TimeoutConstraints, eg:

    Eventually.within(5, TimeUnit.SECONDS);

*   [ORACLETOOLS-167](https://java.net/jira/browse/ORACLETOOLS-167): Fixed
    generic signatures of assertion methods that ise Matchers. This means that
    the correct compile time checking will now be done for assertions. This
    change could introduce compile time errors into existing code that does
    not use the correct types in calls to assert methods.

*   [ORACLETOOLS-192](https://java.net/jira/browse/ORACLETOOLS-192): Resolved
    type ambiguity issue introduced by Java 8 type-inference incompatibility
    with Java 5, 6 and 7, by removing all Eventually.assertThat(..., Deferred, ...)
    methods.   In order to use custom Deferreds directly with Eventually.assertThat
    you must now wrap them in a DeferredHelper.valueOf(...) call.  For example:

    Eventually.assertThat(deferred, matcher);

    must now be written as:

    Eventually.assertThat(valueOf(deferred), matcher);

    *BREAKING CHANGE:*  Sadly this is a breaking change caused by Java 8.

*   [ORACLETOOLS-249](https://java.net/jira/browse/ORACLETOOLS-249): Introduced
    the SystemPropertyIsolation JUnit Rule to ensure any system properties modified
    by tests are reverted (returned to normal) upon completion of a test.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-92](https://java.net/jira/browse/ORACLETOOLS-92): Refactored
    Coherence-specific Runnables and Callables to be RemoteRunnables
    and RemoteCallables respectively.

*   [ORACLETOOLS-98](https://java.net/jira/browse/ORACLETOOLS-98): Refactor
    RestartClusterMemberAction to ensure the existing cluster member is
    no longer present in the cluster and the newly created member becomes
    a member of the cluster.

*   [ORACLETOOLS-99](https://java.net/jira/browse/ORACLETOOLS-99): Introduced
    the ability to determine the UID of a ClusterMember and the UIDs of all
    cluster members from a Cluster.

*   [ORACLETOOLS-103](https://java.net/jira/browse/ORACLETOOLS-103): Moved
    ClusterMember.ServiceStatus to a standalone enumeration.

*   [ORACLETOOLS-105](https://java.net/jira/browse/ORACLETOOLS-105): Introduced
    new Coherence-based interfaces and class implementations to simplify
    creating different types of Coherence applications, members and clusters.

*   [ORACLETOOLS-110](https://java.net/jira/browse/ORACLETOOLS-110): Introduced
    the ability to access NamedCaches using CoherenceClusterMember-based
    applications and via a CoherenceCluster instance.

*   [ORACLETOOLS-117](https://java.net/jira/browse/ORACLETOOLS-117): Removed
    unused and incorrect custom namespaces from Coherence-based tests.

*   [ORACLETOOLS-130](https://java.net/jira/browse/ORACLETOOLS-130): Created
    a specialized remote method interceptor for NamedCaches so that method
    results are made serializable where necessary.

*   [ORACLETOOLS-144](https://java.net/jira/browse/ORACLETOOLS-144): Removed
    deprecated interfaces and classes.

    The following table outlines the previous classes and new equivalent classes.

    *Old Class* -> *New Class*
    Cluster -> CoherenceCluster
    ClusterBuilder  -> CoherenceClusterBuilder
    ClusterMember -> CoherenceCacheServer
    ClusterMemberSchema -> CoherenceCacheServerSchema
    RestartClusterMemberAction -> RestartCoherenceClusterMemberAction

*   [ORACLETOOLS-164](https://java.net/jira/browse/ORACLETOOLS-164): Improved
    internal CoherenceNamedCache implementation to respect and correctly
    ensure arguments and returned method invocation results are serializable.

*   [ORACLETOOLS-177](https://java.net/jira/browse/ORACLETOOLS-177): Removed
    unnecessary ensure(eventually(...)) in the RestartCoherenceClusterMemberAction.

*   [ORACLETOOLS-205](https://java.net/jira/browse/ORACLETOOLS-205): Corrected
    location of CoherenceClusterSchema.getOperationalConfigURI() and
    CoherenceClusterSchema.getPofConfigURI() methods.

*   [ORACLETOOLS-206](https://java.net/jira/browse/ORACLETOOLS-206): Moved
    CoherenceClusterSchema.isStorageEnabled() method to the
    CoherenceClusterMemberSchema interface.

<h4>oracle-tools-coherence-testing-support</h4>

*   [ORACLETOOLS-244](https://java.net/jira/browse/ORACLETOOLS-244): Introduced
    the Coherence Cluster Orchestration JUnit Rule.   This will automatically
    create a Coherence Cluster consisting of two storage enabled servers
    and one proxy enabled storage disabled member.

*   [ORACLETOOLS-256](https://java.net/jira/browse/ORACLETOOLS-256): Enhanced
    the Coherence Cluster Orchestration JUnit Rule to allow the number of
    storage members.

*   [ORACLETOOLS-257](https://java.net/jira/browse/ORACLETOOLS-257): Enhanced
    the Coherence Cluster Orchestration JUnit Rule to allow System properties
    to be specified separately for the storage members and proxy servers.

*   [ORACLETOOLS-258](https://java.net/jira/browse/ORACLETOOLS-257): Enhanced
    the Coherence Cluster Orchestration JUnit Rule to be able to perform a
    rolling restart of the cluster storage members.

<h4>oracle-tools-site</h4>

*   (none)


--------------------------------------------------------------------------------

<h3>Version: 1.2.2 on 2014-02-25 11:21</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   (none)

<h4>oracle-tools-site</h4>

*   [ORACLETOOLS-77](https://java.net/jira/browse/ORACLETOOLS-77): Upgraded
    Doxia and Markdown plug-ins.  This included tidying up the documentation
    formatting and links that were broken/changed as part of the upgrade.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-76](https://java.net/jira/browse/ORACLETOOLS-76): Introduced
    PropertyBuilder.setPropertyIfAbsent method to support optionally setting a property

*   [ORACLETOOLS-78](https://java.net/jira/browse/ORACLETOOLS-78): Introduced
    experimental Actions and ActionExecutors to programmatically control
    the behavior of Applications and Application Groups at runtime.

<h4>oracle-tools-testing-support</h4>

*   [ORACLETOOLS-74](https://java.net/jira/browse/ORACLETOOLS-74): Introduced
    Hamcrest-based com.oracle.tools.matchers.MapMatcher to support matching
    Maps (and NamedCaches) in assertThat statements.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-78](https://java.net/jira/browse/ORACLETOOLS-78): Introduced
    the experimental RestartClusterMemberAction, to safely restart a cluster
    member as part of an Cluster (ApplicationGroup).

<h4>oracle-tools-coherence-testing-support</h4>

*   [ORACLETOOLS-75](https://java.net/jira/browse/ORACLETOOLS-75): Introduced
    Hamcrest-based com.oracle.tools.matchers.PartitionSetMatcher to support
    making Coherence PartitionSet-based assertions.


--------------------------------------------------------------------------------

<h3>Version 1.2.1: 2014-01-24 15:39</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   [ORACLETOOLS-67](https://java.net/jira/browse/ORACLETOOLS-67): Modified
    sure-fire plugin to set java.net.PreferIPv4Stack=true for all tests.  This
    resolves possible Container-based test failures on IPv6 enabled platforms
    when running Java 7 (or 8) on Virtual Private Networks (VPNs).

*   [ORACLETOOLS-71](https://java.net/jira/browse/ORACLETOOLS-71): Upgraded
    to use JUnit 4.11.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-67](https://java.net/jira/browse/ORACLETOOLS-67): Changed the
    definition of Constants.getLocalHost() to return "127.0.0.1"
    (the loopback adapter) to ensure localized testing on VPNs.

    Added a warning when using Container-based Java Application Builders
    when there are incompatible java.net.PreferIPv4Stack settings.

*   [ORACLETOOLS-68](https://java.net/jira/browse/ORACLETOOLS-68): Deprecated
    the concept of "default" properties in the PropertiesBuilder
    (they weren't used).

*   [ORACLETOOLS-73](https://java.net/jira/browse/ORACLETOOLS-73): Optionally
    sets a default RMI address (to Constants.getLocalHost()) when enabling JMX.
    In the past no default was set.

<h4>oracle-tools-coherence-tests</h4>

*   [ORACLETOOLS-72](https://java.net/jira/browse/ORACLETOOLS-72): Updated JMX-based
    tests to ensure they use JMX.


--------------------------------------------------------------------------------

<h3>Version 1.2.0: 2014-01-17 11:31</h3>

<h4>Source and Documentation Contributors</h4>

*   Jonathan Knight, Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   No Changes.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-63](https://java.net/jira/browse/ORACLETOOLS-63): Made
    Application, ApplicationGroup, ApplicationConsole and ApplicationProcess
    implement Closeable to support auto-closing in Java 7+.

    Deprecated all "destroy" methods; they now are delegated onto "close" methods.
    All "destroy" methods will be removed in a later major srelease.

*   [ORACLETOOLS-64](https://java.net/jira/browse/ORACLETOOLS-64): Destroying
    or closing an Application or ApplicationGroup should not close a provided
    ApplicationConsole as this may lead to I/O exceptions should the said
    ApplicationConsole be shared with other Applications/ApplicationGroups.

*   [ORACLETOOLS-65](https://java.net/jira/browse/ORACLETOOLS-65): Introduced
    the ability for AbstractApplicationGroups to add new and remove existing
    Applications dynamically at runtime.  This included making
    AbstractApplicationGroups thread-safe.

*   [ORACLETOOLS-66](https://java.net/jira/browse/ORACLETOOLS-65): Made
    NativeJavaApplicationBuilder use the value from Constants.getLocalHost()
    as the host address property to be passed to child processes instead of
    using InetAddress.getLocalHost().   This resolves connectivity issues
    when running on virtual private networks.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-6](https://java.net/jira/browse/ORACLETOOLS-6): Introduced
    the ability to determine the status of a service from a ClusterMember
    with the ClusterMember.getServiceStatus(String) method.

*   [ORACLETOOLS-62](https://java.net/jira/browse/ORACLETOOLS-62): Upgraded
    to use Coherence 3.7.1.11


--------------------------------------------------------------------------------

<h3>Version: 1.1.0 on 2013-11-20 17:51</h3>

<h4>Source and Documentation Contributors</h4>

*   Brian Oliver

<h4>Global and Cross-Module Changes</h4>

*   No Changes.

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-49](https://java.net/jira/browse/ORACLETOOLS-49): Introduced
    the concept of Capture to capture a single value from an underlying
    Iterator.  This allows said values to be reused without causing new values
    to the produced by the underlying Iterator.

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    the CompletionListener and ExceptionListener interfaces together
    with FutureCompletionListener and DeferredCompletionListener implementations
    for the RemoteExecutor framework.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    the RemoteExecutor framework to support remote execution of Callable and
    Runnables in Java-based Applications.   Implemented support for both
    Container-based and Native Java Applications.

    eg: application.submit(Callable&lt;T&gt;, CompletionListener&lt;T&gt;)

    Stateful Callables / Runnables will need to be Serializable in order to
    be successfully executed correctly, for both in-process/Container-based
    applications and Remote/Native applications.

    Introduced the com.oracle.tools.runtime.concurrent package together with
    a Socket-based implementation.

    This framework is also used to implement "orphan" protection (see below).

*   [ORACLETOOLS-52](https://java.net/jira/browse/ORACLETOOLS-52): Implemented
    "Orphan Protection" for Java-based Applications.

    Refactored how Native Java Applications are started so that they may optionally
    be "orphaned" if the starting process terminates (deliberately or accidentally).

    Added new options to the NativeJavaApplicationBuilder to selectively enable
    orphan protection (enabled by default) - if a parent process terminates,
    child processes terminate.

<h4>oracle-tools-runtime-tests</h4>

*   [ORACLETOOLS-51](https://java.net/jira/browse/ORACLETOOLS-51): Introduced
    RemoteExecutors framework tests.

*   [ORACLETOOLS-52](https://java.net/jira/browse/ORACLETOOLS-52): Introduced
    "Orphan Protection" tests.

<h4>oracle-tools-testing-support</h4>

*   [ORACLETOOLS-54](https://java.net/jira/browse/ORACLETOOLS-54): Introduced
    the ability to use Deferreds to represent Remote Callables together with
    a new Eventually.assertThat method to allow deferred asserts
    based on submitted Callables.

    eg:  Eventually.assertThat(application, callable, matcher);

    will try to eventually match the result of the specified Callable
    when executed, possibly numerous times, with the provided application.

*   [ORACLETOOLS-59](https://java.net/jira/browse/ORACLETOOLS-59): Introduced
    the com.oracle.tools.deferred.Eventually static class to replace the
    now deprecated DeferredAssert class.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-50](https://java.net/jira/browse/ORACLETOOLS-50): Introduced
    the ability to set the "tangosol.coherence.localport" property and have
    it automatically set when WKA is set.

*   [ORACLETOOLS-53](https://java.net/jira/browse/ORACLETOOLS-53): Refactor
    Coherence-based Tools to use RemoteExecutors to determine Member state
    instead of relying on JMX/MBeans.   It's now possible to use and control
    ClusterMembers and Clusters with JMX disabled.

*   [ORACLETOOLS-55](https://java.net/jira/browse/ORACLETOOLS-55): Upgraded
    to use Coherence 3.7.1.10.

*   [ORACLETOOLS-56](https://java.net/jira/browse/ORACLETOOLS-56): Introduced
    the ability to ask the name of a ClusterMember cluster.

*   [ORACLETOOLS-57](https://java.net/jira/browse/ORACLETOOLS-57): Introduced
    the ability specify the operational override for a ClusterMember.

*   [ORACLETOOLS-58](https://java.net/jira/browse/ORACLETOOLS-58): Introduced
    the ability to ask a ClusterMember if a particular service is running.

<h4>oracle-tools-coherence-tests</h4>

*   Refactored existing tests to take advantage of the new Remote Executables
    framework and avoid the requirement to use and configure JMX.

*   Refactored existing tests to take advantage of the new Eventually.assertThat
    method.

*   Refactored existing tests to take advantage of the Captures when creating
    Clusters using a ClusterBuilder.

*   Introduced new tests for the new features in the oracle-tools-coherence
    package.

<h4>oracle-tools-coherence-testing-support</h4>

*   No Changes.

<h4>oracle-tools-site</h4>

*   [ORACLETOOLS-47](https://java.net/jira/browse/ORACLETOOLS-47): Introduced
    initial Coherence Module for Oracle Tools documentation.


--------------------------------------------------------------------------------

<h3>Version 1.0.0: 2013-07-30 13:38 </h3>

<h4>Acknowledgements</h4>

Huge thanks to everyone that contributed feedback, suggestions, documentation
and ideas for this release.  It's great to see broader application adoption,
especially outside Oracle Coherence environments.  We're looking forward to
an even greater release soon, simplifying the testing process even further!

<h4>Source and Documentation Contributors</h4>

*   Noah Arliss, Jonathan Knight, Paul Makin, Brian Oliver and Patrick Peralta

<h4>Global and Cross-Module Changes</h4>

*   [ORACLETOOLS-25](https://java.net/jira/browse/ORACLETOOLS-25): Upgrade Project
    Parent POM to Version 4.

*   [ORACLETOOLS-31](https://java.net/jira/browse/ORACLETOOLS-31): Upgrade GitHub
    Maven Site Plugin to Version 0.8.

<h4>oracle-tools-all</h4>

*   [ORACLETOOLS-34](https://java.net/jira/browse/ORACLETOOLS-34): Introduced to
    provide a single distribution of Oracle Tools.

<h4>oracle-tools-core</h4>

*   [ORACLETOOLS-14](https://java.net/jira/browse/ORACLETOOLS-14): Removed Notified
    Deferred implementation as by nature they are unreliable.

*   [ORACLETOOLS-39](https://java.net/jira/browse/ORACLETOOLS-39): Introduced
    numerous configurable strategies for waiting for Deferreds to become available
    (as implemented by the Ensured class).  These include:  constant (polling),
    fibonacci (random and uniform), exponential (random and uniform).

    Configuring these options occurs by setting the
    "oracletools.deferred.retry.strategy" system property with the values:
    constant, fibonacci, random.fibonacci, exponential or random.exponential.
    The default is now random.fibonacci (instead of constant polling)

    Also introduced the ability to use a system property to set the default
    retry timeout (which is 30 seconds).   The property is:
    "oracletools.defered.retry.timeout".  Units of measure include: ms, s, m and h
    meaning milliseconds, seconds, minutes and hours respectively.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Only applications
    making customize time-out calls, which is rare, will be affected.


*   [ORACLETOOLS-40](https://java.net/jira/browse/ORACLETOOLS-40): Refactored
    Deferred.get() semantics to allow returning null as a valid reference.

    Introduced InstanceUnavailableException to represent the concept that a
    Deferred instance is currently unavailable, but may become available in
    the future. ie: this is thrown instead of null being returned.

    Replaced the ObjectNotAvailableException with the UnresolveableInstanceException.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Only applications
    creating customized Deferred implementations, which is rare, will be affected.

<h4>oracle-tools-runtime</h4>

*   [ORACLETOOLS-12](https://java.net/jira/browse/ORACLETOOLS-12): Resolved issue
    when Native processes would fail to execute due to timing and class-path
    issues (on Windows Platforms).

*   [ORACLETOOLS-13](https://java.net/jira/browse/ORACLETOOLS-13): Resolved issue
    Oracle Tools virtualization would fail to run when classpaths contain
    whitespace (on Windows Platforms).

*   [ORACLETOOLS-21](https://java.net/jira/browse/ORACLETOOLS-21): Refactored
    and renamed Virtualization package and associated Virtualizeed Application,
    Virtualized Process and Virtualize Builders to be themed as being
    "ContainerBased".   This was to clear up possible confusion when running
    Native applications on Virtualized infrastructure.  As part of this work we
    also renamed ExternalJavaApplicationBuilder to be a NativeJavaApplicationBuilder.

*   [ORACLETOOLS-26](https://java.net/jira/browse/ORACLETOOLS-26): Refactored
    the ApplicationConsole interfaces and implementations to allow separate
    control of stdout, stderr and stdin.

*   [ORACLETOOLS-27](https://java.net/jira/browse/ORACLETOOLS-27): Introduced
    the concept of "diagnostics" to provide application life-cycle information
    without requiring redirection of ApplicationConsoles.

*   [ORACLETOOLS-28](https://java.net/jira/browse/ORACLETOOLS-28): Introduced
    the ability to enable remote Java debugging (when using Java-based Application
    Schemas) for Native Java Applications.

*   [ORACLETOOLS-29](https://java.net/jira/browse/ORACLETOOLS-29): Resolved issue
    where the names of Applications created as part of an Group start at 0 instead
    of 1.

*   [ORACLETOOLS-30](https://java.net/jira/browse/ORACLETOOLS-30): Resolves issue
    where Native Windows NT / XP processes may hang when being destroyed.

*   [ORACLETOOLS-32](https://java.net/jira/browse/ORACLETOOLS-32): ApplicationSchemas
    now *default* to inheriting environment variables from the underlying process.

*   [ORACLETOOLS-36](https://java.net/jira/browse/ORACLETOOLS-36): Resolves issues
    where having spaces in a System Property may cause a Native Java application not
    to start.

*   [ORACLETOOLS-37](https://java.net/jira/browse/ORACLETOOLS-37): Renamed and refactored
    PropertiesBuilder.fromCurrentSystemProperties to return only custom properties.
    The new method is called PropertiesBuilder.fromCurrentNonStandardSystemProperties.

    *Breaking Change:*  While this is a breaking change, the chance of an
    application being impacted is very minimal, if at all.  Applications using the
    previous method would not support cross-platform deployment.  Changing to
    the new method resolves this.

<h4>oracle-tools-runtime-tests</h4>

*   Introduced to encapsulate Functional and Integration Tests.

<h4>oracle-tools-testing-support</h4>

*   No Changes.

<h4>oracle-tools-coherence</h4>

*   [ORACLETOOLS-2](https://java.net/jira/browse/ORACLETOOLS-2): Resolved issue
    when DeferredAssert would hang (wait for a long time) when querying an MBean
    for a crashed server.

*   [ORACLETOOLS-4](https://java.net/jira/browse/ORACLETOOLS-2): Resolved issue
    when calling "eventually" on a non existent MBean would hang forever
    (wait for a long time).

*   [ORACLETOOLS-10](https://java.net/jira/browse/ORACLETOOLS-10): Add support for
    specifying a log destination for Coherence when using a Coherence-based MemeberSchema.

*   [ORACLETOOLS-35](https://java.net/jira/browse/ORACLETOOLS-35): Add automatic support
    enabling file-base XSD loading with Coherence using Java 8 (b91) that includes
    JAXP 1.5 changes.

*   [ORACLETOOLS-38](https://java.net/jira/browse/ORACLETOOLS-38): Add automatic support
    for running in "java.awt.headless" mode.

<h4>oracle-tools-coherence-tests</h4>

*   Introduced to encapsulate Functional and Integration Tests.

<h4>oracle-tools-coherence-testing-support</h4>

*   [ORACLETOOLS-19](https://java.net/jira/browse/ORACLETOOLS-19): Introduced
    an AbtractCoherenceTest to support Coherence Test isolation.


--------------------------------------------------------------------------------

<h3>Version 0.0.8 @ 2013-02-26 13:12 </h3>

<h4>Global and Cross-Module Changes</h4>

*   Initial Release based on work from The Oracle Coherence Incubator.

<h4>oracle-tools-core</h4>

*   Defines Core and Shared Interfaces, Classes and Resources.

<h4>oracle-tools-runtime</h4>

*   Defines Runtime Process Management infrastructure.

<h4>oracle-tools-testing-support</h4>

*   Defines JUnit Testing Extensions for Deferred Resources.

<h4>oracle-tools-coherence</h4>

*   Defines Extensions to manage Oracle Coherence Runtimes.
