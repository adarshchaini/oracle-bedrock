The Coherence Module for Oracle Tools
-------------------------------------

<h4>The Twenty Second Synopsis</h4>

**What?**
The Coherence Module for Oracle Tools allows applications to define, create, monitor
and simply manage [Oracle Coherence][COH]-based applications, including individual
Cache Servers (both storage enabled and disabled), Proxy Servers, Management Servers together
with entire Coherence Clusters at runtime.

Technically speaking, the Coherence Module for Oracle Tools is an extension of and
leverages the facilities provided by the [Runtime Module for Oracle Tools][RUNTIME]
to control Coherence-based applications, in much the same way that the
[Runtime Module for Oracle Tools][RUNTIME] controls regular Java and non-Java-based
applications.

**When?**
Use the Coherence Module for Oracle Tools when you need to coordinate multiple
[Oracle Coherence][COH] applications, servers or clusters, especially as part of
distributed application functional and integration tests or when you'd traditionally
make use of Shell/Ant/Maven/Python/Groovy et al scripting or the Java Platform
`java.lang.Process` class.

**Why?**
Programmatically controlling and testing distributed applications can be a complicated,
frustrating and error-prone matter.   While the `java.lang.Process` and associated classes
provide rudimentary mechanisms to control application processes, like [Oracle Coherence][COH],
developers typically need to make many assumptions about the underlying operating
system, environment, platforms etc, write defensive code for said platforms or make
extensive use of platform-specific scripting.

The Coherence Module for Oracle Tools removes these requirements and simplifies
this development activity when working with [Oracle Coherence][COH], making developing
complex tests effortless.

**How?**
As this module is an extension to the [Runtime Module for Oracle Tools][RUNTIME] module, we
highly recommend reading the [Introduction to Application Management](../runtime/applications.html)
for core concepts, background information and introductory examples.


--------------------------------------------------------------------------------

<h4>Distribution</h4>

The Oracle Tools Coherence module is distributed as a single jar
called: `oracle-tools-coherence-${project.version}.jar`


The [maven.java.net](https://maven.java.net) artifact information is as follows:

*   Maven Group Id: `${project.groupId}`
*   Maven Artifact Id: `oracle-tools-coherence`
*   Maven Version: `${project.version}`

Alternatively you can downlown directly from: <img src="../images/external-link.png" alt="External Link" height="10" width="10" align="top"/>


[oracle-tools-coherence-${project.version}.jar](https://maven.java.net/service/local/artifact/maven/redirect?r=${repository}&amp;g=com.oracle.bedrock&amp;a=oracle-tools-coherence&amp;v=${project.version}&amp;e=jar)

<h4>Source Code</h4>

Source code for this and other Oracle Tools modules can be found here:
[https://github.com/coherence-community/oracle-tools](https://github.com/coherence-community/oracle-tools)


Getting Started
---------------

Like the [Runtime Module for Oracle Tools][RUNTIME], the Coherence Module for Oracle Tools
uses the concepts of Schemas, Applications and Builders to define, control and construct
[Oracle Coherence][COH]-based applications.   The difference however is that the Coherence
Module for Oracle Tools introduces several new Schemas, Applications and Builders, specifically
designed for working with [Oracle Coherence][COH].

Specifically the Coherence Module for Oracle Tools introduces the following classes:

**`com.oracle.bedrock.runtime.coherence.CoherenceCacheServerSchema`**: represents the configuration of a
proposed [Oracle Coherence][COH]-based Cache Server.

**`com.oracle.bedrock.runtime.coherence.CoherenceCacheServer`**: represents a controllable runtime
instance of an [Oracle Coherence][COH]-based Cache Server.

**`com.oracle.bedrock.runtime.coherence.CoherenceClusterBuilder`**: provides a mechanism to build an
entire [Oracle Coherence][COH] cluster, based on a collection of CoherenceClusterMemberSchemas.

**`com.oracle.bedrock.runtime.coherence.CoherenceCluster`**: provides a mechanism to represents and
control a [Oracle Coherence][COH] cluster, including access to individual CoherenceClusterMembers.

Tutorial
--------

The following sections provide recipes using the Coherence Module for Oracle Tools with
[Oracle Coherence][COH].

<h4>Creating a Single Coherence Storage Enabled Server</h4>

The following example will create a storage-enabled Coherence Cache Server, using
default configuration.

    import com.oracle.bedrock.runtime.LocalPlatform;
    import com.oracle.bedrock.runtime.network.AvailablePortIterator;

    import static com.oracle.bedrock.deferred.DeferredHelper.invoking;
    import static com.oracle.bedrock.deferred.Eventually.assertThat;
    import static org.hamcrest.CoreMatchers.is;

    ...

    // acquire the platform on which we'll create the cluster member
    LocalPlatform platform = LocalPlatform.getInstance();

    // acquire a set of available ports on the platform
    AvailablePortIterator availablePorts = platform.getAvailablePorts();

    // define the schema for a Coherence Cache Server
    CoherenceCacheServerchema schema =
        new ClusterMemberSchema()
            .setClusterPort(availablePorts)    //automatically choose an available port!
            .useLocalHostMode();

    // the console for i/o
    SystemApplicationConsole console = new SystemApplicationConsole();

    try (CoherenceCacheServer server = platform.realize("test-server", schema, console))
    {
        // assert that (eventually) the cluster details are as expected
        Eventually.assertThat(invoking(server).getLocalMemberId(), is(1));
        Eventually.assertThat(invoking(server).getClusterSize(), is(1));
    }

Important concepts from the above example:

<h5>AvailablePortIterators:</h5>

`AvailablePortIterator`s free developers from working out available server socket
ports on a host.   All port-based parameters for `CoherenceCacheServerSchema` naturally accept
either a specific port or an `AvailablePortIterator`.   By using `AvailablePortIterator`s
it's highly unlikely you'll ever have to set a Coherence cluster port.

To determine the port that is actually used for a `CoherenceCacheServer`, simply use the
`CoherenceCacheServer.getClusterPort()` method.

<h5>Use Local Host Mode:</h5>

The `useLocalHostMode` property of a `CoherenceCacheServerSchema` automatically sets the
`CoherenceCacheServer` to use a TTL of 0 and binds the localhost to a suitable localhost address.

Using "useLocalHostMode" eliminates the need to determine the cluster address on which
a `CoherenceCacheServer` should listen.   The downside being, that only `CoherenceCacheServer`s
on the said host will cluster together, and not across hosts.

<h5>Eventually.assertThat(...):</h5>

The use of the `Eventually` class, together with Deferred References, allows developers
to write test cases and assertions on asynchronous tasks without requiring `Thread.sleep(...)`
calls to wait for tasks to complete.

<h5>CoherenceCacheServerSchema:</h5>

The `CoherenceCacheServerSchema` class provides all of the typically used [Oracle Coherence][COH]
properties that an application developer would set, including those at the command-line.

Some of the available options include:

    setCacheConfigURI(String)
    setOperationalOverrideURI(String)

    setPofConfigURI(String)
    setPofEnabled(boolean)

    setStorageEnabled(boolean)

    setLocalHostAddress(String)
    setLocalHostPort(int)

    setWellKnownAddress(String)
    setWellKnownAddressPort(int)

    setTCMPEnabled(boolean)

    setMulticastTTL(int)

    setClusterPort(int)
    setClusterPort(Iterator<Integer> ports)

    useLocalHostMode()

    setClusterName(string)
    setRoleName(String)
    setSiteName(String)

    setJMXManagementMode(JMXManagementMode)
    setRemoteJMXManagement(boolean)

    setLogLevel(int)
    setLog(String)

For the complete list of available options, please consult the Java Doc for the
`CoherenceCacheServerSchema` class.

<h4>Creating a Single Coherence Storage Disabled Server</h4>

Creating a storage-disabled Cache Server is as simple as setting the `setStorageEnabled`
property of a `CoherenceCacheServerSchema` to `false`.

    // define a cluster member
    CoherenceCacheServerSchema schema =
        new CoherenceCacheServerSchema()
            .setClusterPort(availablePorts)
            .useLocalHostMode()
            .setStorageEnabled(false);          //storage disabled!

<h4>Creating a Cluster of Coherence Storage Enabled Servers</h4>

While creating individual Cache Servers is useful, typically applications and
integration tests require multiple cluster members, arranged as a Coherence Cluster.

To simplify representing, building and managing multiple `CoherenceCacheServer`s as a
group of applications, ie: a `CoherenceCluster`, developers should use the
`CoherenceClusterBuilder`.

    import com.oracle.bedrock.runtime.LocalPlatform;
    import com.oracle.bedrock.runtime.console.SystemApplicationConsole;
    import com.oracle.bedrock.runtime.network.AvailablePortIterator;

    import static com.oracle.bedrock.deferred.DeferredHelper.invoking;
    import static com.oracle.bedrock.deferred.Eventually.assertThat;
    import static org.hamcrest.CoreMatchers.is;

    ...

    // the desired cluster size
    final int CLUSTER_SIZE   = 3;

    LocalPlatform platform = LocalPlatform.getInstance();
    AvailablePortIterator availablePorts = platform.getAvailablePorts();

    // use a Capture to capture the Cluster Port to ensure
    // all Cache Servers use the same port!
    Capture<Integer> clusterPort = new Capture<Integer>(availablePorts);

    // define the schema for an individual cache server
    CoherenceCacheServerSchema schema = new CoherenceCacheServerSchema()
        .setClusterPort(clusterPort)
        .useLocalHostMode();

    // configure our CoherenceClusterBuilder
    CoherenceClusterBuilder clusterBuilder = new CoherenceClusterBuilder();

    // instruct the builder the schema to use for some cache servers to build
    clusterBuilder.addSchema("CacheServer", schema, CLUSTER_SIZE, platform);

    try (CoherenceCluster cluster = clusterBuilder.realize(new SystemApplicationConsole()))
    {
        // ensure that the expected cluster is created
        Eventually.assertThat(invoking(cluster).getClusterSize(), is(CLUSTER_SIZE));
    }

As mentioned in the above comments, a `CoherenceClusterBuilder` may consist of multiple
schemas, potentially across multiple platforms.   This allows different Coherence topologies to be constructed.

For example, say you'd like several differently configured servers in a cluster. You can use a
`CoherenceClusterBuilder` to define easily:

    clusterBuilder.addSchema("Storage", storageSchema, nrStorageMembers, platform);
    clusterBuilder.addSchema("Proxy", proxySchema, nrProxyMembers, platform);
    clusterBuilder.addSchema("Management", managementSchema, nrManagementMembers, platform);

When the `CoherenceClusterBuilder.realize(...)` method is called, an entire cluster consisting of the
appropriate number of members will be built and returned as a `CoherenceCluster`.

[COH]: http://www.oracle.com/technetwork/middleware/coherence/overview/index.html "Oracle Coherence"
[RUNTIME]: ../runtime/index.html