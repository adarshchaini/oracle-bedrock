Application Runtime Management
------------------------------

<h4>The Twenty Second Synopsis</h4>

**What?**
The Oracle Tools Runtime module provides a high-level framework that
allows applications to define, create, monitor and manage other applications and
associated processes at runtime.

**When?**
Use the Oracle Tools Runtime framework when you need to coordinate multiple
application processes, especially as part of distributed application
functional and integration tests or when you'd traditionally make use of
the Java Platform `java.lang.Process` class.

**Why?**
Programmatically controlling application processes can be a complicated and
error-prone matter.   While the `java.lang.Process` and associated classes provide
rudimentary mechanisms to control application processes, developers typically
need to make several assumptions about the underlying operating system or
write a lot of defensive code to work in such environments.

The Oracle Tools framework removes these requirements and simplifies this
development activity.

**How?**
Read this document to find out.

**Where?**
The Oracle Tools Runtime framework is defined in the following Maven module
and Java package:

*   Maven Group Id: `${project.groupId}`
*   Maven Artifact Id: `oracle-tools-runtime`
*   Maven Version: `${project.version}`
*   Java Package: `com.oracle.bedrock.runtime`


-------------------------------------------------------------------------------

<h4>Overview</h4>

The Oracle Tools Runtime module provides a framework to programmatically define,
create and control executing *Application Processes*, here after simply referred to
as *Applications*.

Central to the operation of the framework are the following three concepts:

1.  **Schemas:**  Define the desired runtime characteristics of *Applications* when
    they are created.

    The `com.oracle.bedrock.runtime.ApplicationSchema` interface defines the minimal
    requirements of a Schema.

2.  **Platforms:**  Create *Applications* from the characteristics defined by *Schemas*.

    The `com.oracle.bedrock.runtime.Platform` interface defines the minimal
    requirements of a Platform.

3.  **Applications:**  Provide a runtime representation of *Applications*, created by
    *Platforms*, specified by *Schemas*.

    The `com.oracle.bedrock.runtime.Application` interface defines the minimal
    requirements of an Application.

The following sections outline how to use each of these concepts in an application,
together with tips for optimization in certain environments.

<h4>Creating and Managing Regular Applications</h4>

Let's start with a simple example, defining, creating and waiting for a native
operating application process to terminate.

    import com.oracle.bedrock.runtime.LocalPlatform;
    import com.oracle.bedrock.runtime.SimpleApplication;
    import com.oracle.bedrock.runtime.SimpleApplicationBuilder;
    import com.oracle.bedrock.runtime.SimpleApplicationSchema;
    import com.oracle.bedrock.runtime.console.SystemApplicationConsole;

    public class SimpleApplicationExample
    {
        public static void main(String[] args) throws Exception
        {
            // STEP 1: Define an ApplicationSchema
            SimpleApplicationSchema schema =
                new SimpleApplicationSchema("java")
                    .addArgument("-version");

            // STEP 2: Define a Platform on which to create the Application
            Platform platform = LocalPlatform.getInstance();

            // STEP 3: Realize the Application
            SimpleApplication application
                = platform.realize("My Application",
                                   schema,
                                   new SystemApplicationConsole());

            // STEP 4: Wait for the Application to Terminate
            int exitCode = application.waitFor();
        }
    }

In *Step 1* we instantiate a new `SimpleApplicationSchema` and set the
operating-system process to execute, namely `java`, and add the arguments
for the process, namely `-version`.

In *Step 2* we acquire a `Platform` that we will use to build a `SimpleApplication`
from a `SimpleApplicationSchema`.  The resulting `SimpleApplication` will represent
a native operating-system process, running on the local machine, hence the
reason it is called a 'LocalPlatform'.

In *Step 3* we realize (create) the `SimpleApplication` using the Platform and
configured Schema.   For display and identification
purposes, we name the returned `SimpleApplication` "My Application".

Additionally we specify that all of the standard input/output/error
console interactions will use the provided `SystemApplicationConsole`, that
of which simply re-directs these streams to the standard streams.  This
means the the I/O from the `SimpleApplication` will appear as I/O in the
`SimpleApplicationExample` I/O.

>   There are many different approaches for managing Application I/O.
>   Each of these approaches are represented as unique classes in the
>   `com.oracle.bedrock.runtime.console` package.

Lastly in *Step 4* we wait for the realized `SimpleApplication`, namely
"java -version" to terminate.

The result of executing the `SimpleApplicationExample` above will produce
something like the following output:

    [My Application:err:7238]    1: java version "1.7.0_11"
    [My Application:err:7238]    2: Java(TM) SE Runtime Environment (build 1.7.0_11-b21)
    [My Application:err:7238]    3: (terminated)
    [My Application:out:7238]    1: (terminated)

Where by:

*   The formatted output from the `SystemApplicationConsole` for the
    `SimpleApplication` (in this case "java -version") is prefixed with
    `[<application name>:<device>:<process-id>] <line-number>:`

*   When stream output is terminated, usually by the application execution
    terminating, the output `(terminated)` is output on a single line.

>   This example assumes that the "java" executable is resolvable by the
>   operating-system when a native process is started.  If it is not, the
>   application may fail and a suitable error code will be returned
>   (during `waitFor`).

For more information concerning the features and characteristics of
Applications, Schemas and Platforms for simple applications, please refer to
the  Java Documentation for the `com.oracle.bedrock.runtime.SimpleApplication` and
`com.oracle.bedrock.runtime.SimpleApplicationSchema` classes.

<h4>Creating and Managing Java-based Applications</h4>

In most cases Java developers will traditionally to create and manage
Java-based applications and while it is possible to do so using the Applications,
Schema and Platform classes described above, the Oracle Tools Runtime framework
provides specific features and implementations to deal with Java-based Applications.
These are defined by the `com.oracle.bedrock.runtime.java` package.

For the most part, instead of using the `SimpleApplicationSchema` to define
the characteristics of an application, Java-based applications will be
defined using a `com.oracle.bedrock.runtime.java.SimpleJavaApplicationSchema`.
This Schema allows a developer to simply define Java specific information, like:

*   The name of the main application class.

*   The class-path of the application.

*   Required application arguments.

*   Required JVM options.

instead of attempting to do so using operating-system specific arguments.

**Example: Defining a Java Application Schema**

The following example demonstrates how to define a Java Application Schema
for the Oracle Coherence Console Application, that of which is often
started using the `main` method defined by the `com.tangosol.net.CacheFactory`
class.

    String classpath = "~/.m2/repository/com/oracle/coherence/coherence/3.7.1.9/coherence-3.7.1.9.jar";

    SimpleJavaApplicationSchema schema =
        new SimpleJavaApplicationSchema("com.tangosol.net.CacheFactory", classpath)
            .setArgument("coherence-cache-config.xml")
            .setOption("-Xmx256m")
            .setSystemProperty("tangosol.coherence.clusterport", "37191");

>   An alternative approach to defining Oracle Coherence-based applications
>   is to use the Oracle Tools for Coherence module, that of which defines
>   specific Applications and Schemas to simplify managing
>   Oracle Coherence-based applications.

<h5>The JavaVirtualMachine Platform</h5>

In addition to realizing Java-based Applications on a LocalPlatform, it's
also possible to run them in the same Java Virtual Machine as the
controlling application.

That is instead of creating a new local operating-system process
for the realized Java Application, we instead can run the application
in the same process, much like an Application Server or Container does
when launching Enterprise Applications.

To run an application in-process like an Application Server or Container,
developers can use the `com.oracle.bedrock.runtime.java.JavaVirtualMachine`
platform

**Example: Using the JavaVirtualMachine platform**

    import com.oracle.bedrock.runtime.java.JavaVirtualMachine;

    Platform platform = JavaVirtualMachine.getInstance();

    JavaApplication application =
        platform.realize("My Application",
                         schema,
                         new SystemApplicationConsole());

>   The only difference between launching a Java Application as a local
>   operating-system process and a container-based application is the
>   choice of the Platform.

One of the important benefits of the Container-based approach for
launching applications is that it's very easy to resolve defects
when an application is running, simply because setting break-points is
trivial.   There is no need for multi-process and remote debugging
configurations as everything is run "in-process".

Although beneficial, there are some caveats to remember about this
style of launching applications.

1.  While the System I/O streams, System Properties and JMX Servers
    are isolated for each contained application, should an application
    call `System.exit(...)` all applications will terminate.

2.  As each contained application is loaded with in its own ClassLoader
    considerations must be made as to the required size of the
    PermGen (especially pre Java 8) as a small PermGen may cause
    `OutOfMemoryException`s.   To reduce the likelihood of this occuring
    it is recommended that a PermGen is sized accordingly using the
    `-XX:MaxPermSize=nnnM` setting, typically something larger than 256M
    often being sufficient.

3.  Unlike Java EE container-based applications that have know lifecycle
    interfaces for starting and stopping applications, Java Console-based
    applications do not.   Conseqently care must be taken when using
    executing container-based applications as the ability to "stop"
    an executing application may not be possible.